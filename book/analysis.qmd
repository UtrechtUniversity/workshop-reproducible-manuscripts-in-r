# Analysis

Unlike regular R scripts, code in R Markdown documents is run within so-called _code chunks_ to separate text from code.

You can insert code chunks by: 

- using the _Add Chunk_ button in RStudio's editor toolbar,
    
- using keyboard shortcuts **Ctrl + Alt + I** on Windows and **Cmd + Option + I** on MacOS,

- or by typing the chunk delimiters ```{r} and ```.

If the default code chunk options are in place, rendering your R Markdown file will involve each code chunk being run and the results being embedded beneath the code chunk in the final document.

## Code Chunk Options

Chunks can be customized using the following options:

- `include = FALSE` prevents code and results from appearing in the finished file. R Markdown still runs the code in the chunk, and the results can be used by other chunks.

- `echo = FALSE` prevents code, but not the results from appearing in the finished file. This is a useful way to embed figures.

- `message = FALSE` prevents messages that are generated by code from appearing in the finished file.

- `warning = FALSE` prevents warnings that are generated by code from appearing in the finished.

- `fig.cap = "..."` adds a caption to graphical results.

The code chunk option has to be specified within the top chunk delimiter: ```{r}

For example, ```{r echo=FALSE, warning=TRUE}

## Inline Code

Code results or quick calculations can be inserted directly into the text of a R Markdown by enclosing the code with ``r ``. When the document is rendered, the results of the inline code will be displayed but not the code itself. There will be no additional text formatting either, which makes the inline code output indistinguishable from surrounding text.

Inline code is a great option for reporting results in text in a reproducible way, while minimizing errors.

### Exercise

Like the previous exercise, we're providing some code that you could place in your R Markdown document.

- First, insert a setup code chunk t the beginning of your document (i.e. below the YAML header) to specify the working directory.

- Use the following workflow for the rest of the script: 
    
    - create a code chunk in the `Results` section of your document, 
    
    - copy a piece/section of the script and paste it into the code chunk,

    - run the code chunk and see if it works alright,

    - repeat the previous three steps until the whole dummy script has been incorporated within code chunks in your manuscript.

- Render the document and check the output.

- Play around with different code chunk options. Which chunk option would hide the code and only show results, as you might like in a final manuscript?

- Insert a sentence or two in the `Results` section about the mean flipper length and mean bill length. Use _inline R code_ to: 

    - calculate the mean flipper length within the text itself

    - report the mean bill length directly from the `mean` data frame

- Render the document again and observe the differences with the code chunks and inline code.

```{r}
#| eval: false

knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file()) #setup code chunk

read.csv('data/data.csv')

str(penguins)
# this is our data set

# let's analyze the data

library(tidyverse)
library(ggplot2)

# summarize them
penguins %>% 
        count(species)

# exclude NAs

penguins <- na.omit(penguins)

# let's do some quick averages

fl_mean <- round(mean(flipper_length_mm))
bl_mean <- round(mean(bill_length_mm))

mean <- data.frame(fl_mean, bl_mean)

# mutate the dataset

## let's calculate the ratio between body mass and flipper length and bill length and bill depth

penguins <- penguins %>% 
                mutate(fl_b_ratio = flipper_length_mm / body_mass_g,
                       bill_length_depth = bill_length_mm / bill_depth_mm)

penguins

# let's visualize the data

## let's plot species vs body mass color coded by sex

penguin_weight <- ggplot( data = penguins, aes( x = species, y = body_mass_g, color = sex)) +
          geom_point() +
  scale_color_manual(values = c("yellow","purple")) +
  labs(x = "Species",
       y = "Body mass (g)",
       title = "Penguin species weight")
penguin_weight

## let's plot bill length vs depth

bill_len_dep <- ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, group = species)) +
  geom_point(aes(color = species, shape = sex), size = 3, alpha = 0.8) +
  #geom_smooth(method = "lm", se = FALSE, aes(color = species)) +
  scale_color_manual(values = c("darkorange","purple","cyan4")) +
  labs(title = "Penguin bill dimensions",
       subtitle = "Bill length and depth for Adelie, Chinstrap and Gentoo Penguins at Palmer Station LTER",
       x = "Bill length (mm)",
       y = "Bill depth (mm)",
       color = "Penguin species",
       shape = "Penguin species") +
  theme(legend.position = c(0.85, 0.15),
        plot.title.position = "plot",
        plot.caption = element_text(hjust = 0, face= "italic"),
        plot.caption.position = "plot")
bill_len_dep

## let's compare the flipper length distribution between the different species

flipper_hist <- ggplot(data = penguins, aes(x = flipper_length_mm)) +
  geom_histogram(aes(fill = species), 
                 alpha = 0.5, 
                 position = "identity") +
  scale_fill_manual(values = c("darkorange","purple","cyan4")) +
  labs(x = "Flipper length (mm)",
       y = "Frequency",
       title = "Penguin flipper lengths")
flipper_hist

## have a figure already ready in a folder and want to add it here: 

knitr::opts_knit$set(root.dir = "path/to/your/project")

knitr::include_graphics("figures/your_figure_file_name.png")
```
